# 100 Days Of Code - Log

### Day 1: 12, May 2024 

**Today's Progress**: Started adding web3 to a node/react project. Begun by adding Privy login to the embed wallet of the submissions app

**Thoughts:** This was painfully easy... but may not work long term. Currently my app is on create-react-app which requires Typescript 5<. Privy requires typescript 5>. I tried to set some overrides for a while but then gave up.

**Link to work:** pushed 

### Day2
**Today's Progress**:: I noticed yesterday that the submission period check (which was meant to be open all week), wasn't working on Sundays yesterday. I fixed it by working out that JS starts Sundays at zero (to saturday's 6) instead of Monday's at zero. Once adjusted, it worked. I then moved back to privy and specificially the 'authenticated' option. I added an IF statement
**Thoughts:** - Privy is great. 

### Day3
**Today's Progress**:: mostly back and forth with gpt on the best way to run the voting component of submissions; onchain or offchain. The hypothesis for now is a hybrid approach. Vote power is calculated via a smart contract based on tokens in a wallet. Vote tallying & result itself is via our server due to our requirement to have a centralised veto for now. We can transfer this to onchain vote plus multisig veto later... but lets not deal with gas and robustness problems right now.After this decision, I looked for a very basic vote power snapshot contract on base sepolia but couldn't find one. So for now I'll write my own. I then spent the rest of my time, setting up my environment for contract work. That took ages. Just in 5 mins I took a template of the votepower.sol contract and deploy.js gpt gave me and shoved it in. I'll pick up reviewing these tomorrow
**Thoughts:** - Dev environment versioning sucks... but gpt does get there in the end. I'm not entirely happy using my own voting snapshot contract. this must exist already on base sepolia so will keep searching

### Day4
**Today's Progress**:: went back through the templates of votepower.sol / deploy.js. Commented up to make sure I understand it fully. I then tried to test the contracts via command line/hardhat... kept getting an error ('TypeError: votePower.deployed is not a function'). No solution yet
**Thoughts:** - 


TO DO IDEAS:
Essentials for Later Development
Persistent Data Storage:
Database Integration: Replace the in-memory storage with a database like MongoDB, PostgreSQL, or similar. This will ensure that your data persists across server restarts and can be scaled as your application grows.
Data Models: Define robust data models/schema for submissions and votes. This helps in managing and querying data more efficiently.
Authentication and Authorization:
Allow vote power based on onchain tokens in embedded or EOA wallet
Robust Error Handling: Implement comprehensive error handling in the backend to manage and respond to errors gracefully.
Data Validation: Validate incoming data to prevent incorrect or malicious data from being processed.
Nice-to-Haves for Enhanced Functionality
Real-Time Updates:
WebSockets or Polling: Implement WebSockets for a real-time user experience, especially for displaying live voting results and market data updates.
Push Notifications: Inform users about important events (e.g., market changes, voting results) through real-time notifications.
Advanced Market Features:
Dynamic Pricing Algorithm: Implement or integrate a more complex algorithm for better prediction market dynamics.
Historical Data Analysis: Provide historical analysis of market predictions and outcomes to enhance user trust and engagement.
User Experience Improvements:
Interactive UI Components: Enhance the frontend with interactive charts and visualizations using libraries like D3.js or Chart.js for market data.
Mobile Optimization: Ensure the application is fully responsive and optimized for mobile devices.
Security Enhancements:
Rate Limiting: Prevent abuse by limiting how frequently a user can make requests to the API.
Audit and Monitoring: Implement logging and monitoring to detect unusual activities or performance issues.
Scalability Considerations:
Load Balancing: Prepare for scaling your application with load balancing techniques.
Microservices Architecture: If expecting significant growth, consider adopting a microservices architecture to make scaling individual components of your app easier.